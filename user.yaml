
tags:
   name: user
   description: The user managing API
/users:
  get:
    summary: Lists all the user
    tags: [user]
    responses:
      200:
        description: The list of the books
        content:
          application/json:
            schema:
              type: array
              items:
              $ref: '#/components/schemas/User'
  post:
    summary: Create a new book
    tags: [user]
    requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    responses:
      201:
        description: The created book.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
    500:
      description: Some server error

/users/{id}:
  get:
    summary: Get the user by id
    tags: [user]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The user id
    responses:
      200:
        description: The user response by id
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: The user was not found
  put:
    summary: Update the user by the id
    tags: [user]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The user id
    requestBody:
      required: true
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/User'
    responses:
      201:
        description: The user was updated
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      404:
        description: The user was not found
      500:
        description: Some error happened
  
  delete:
    summary: Remove the user by id
    tags: [user]
    parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
        description: The user id
    responses:
      200:
        description: The user was deleted
      404:
        description: The user was not found

components:
  schemas:
    User:
      type: object
      required:
        - name
        - password
        - profession
      properties:
        id:
          type: string
          description: The auto-generated id of the user
        name:
          type: string
          description: name of user
        password:
          type: string
          description: The password of user
        profession:
          type: string
          description: the profession of user
        createdAt:
          type: string
          format: date
          description: The date the user was added
      example:
        id: d5fE_asz
        name: Đặng Văn Tỵ
        password: passwordty
        profession: sing
        createdAt: 2023-02-10T04:05:06.157Z
